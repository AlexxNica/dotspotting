<?php

	#
	# By default this file contains various database and crypto secrets that
	# dotspotting expects to be present.
	#
	# THIS IS JUST AN EXAMPLE FILE. AS A GENERAL RULE, SENSITIVE DATA LIKE
	# DATABASE SECRETS SHOULD BE STORED OUTSIDE OF (INSERT YOUR SOURCE CONTROL
	# SYSTEM HERE).
	#
	# Note that 'dotspotting.php' is explicity blacklisted from being checked
	# in to git in the '.gitignore' file.
	#

	#
	# Any settings you define here will overwrite settings in the dotspotting include/config.php.
	# 
	# Which means two things:
	#
	# 1) Not all of the config parameters you may want or need to tweak are listed here. Only the bare
	#    minimum needed to get you started.
	#
	# 2) dotspotting's include/config.php itself overwrites settings in the flamework include/config.php
	#
	#    Specifically, in (dotspotting) include/init.php the following files are loaded in this order:
	#
	#    a) flamework's include/config.php
	#    b) dotspotting's include/config.php
	#    c) dotspotting's config/dotspotting.php <-- aka "the file you are reading right now"
	#
	# There is a file containing *all* of the configs that dotspotting uses (including those defined
	# in flamework) in [TBW]
	#

	#
	# You MUST change these
	#

	$GLOBALS['cfg']['abs_root_url'] = '';

	$GLOBALS['cfg']['db_main']['host'] = '';
	$GLOBALS['cfg']['db_main']['user'] = '';
	$GLOBALS['cfg']['db_main']['pass'] = '';

	#	
	# If you have the various db_enable_poormans_* config flags set (they are on by default in
	# dotspotting) you don't need to worry about configs for the 'db_main_slaves', 'db_users'
	# and 'db_tickets' database clusters. The db_enable_poormans_* flags will auto-populate the
	# corresponding database configs automagically. If you disable the 'poorman' flags, you will
	# need to add the relevant database configs here, though.
	#

	#
	# No, really - change these. These are the secrets used to encrypt the various pieces of sensitive
	# data on your website. These aren't secrets that you'll ever need to type in to a form so you
	# should make them long and twisty and hard to guess (a good rule of thumb is 13 or more characters
	# of gibberish).
	#

	$GLOBALS['cfg']['crypto_cookie_secret'] = '';
	$GLOBALS['cfg']['crypto_password_secret'] = '';
	$GLOBALS['cfg']['crypto_crumb_secret'] = '';

	#
	# You SHOULD change these
	#

	# $GLOBALS['cfg']['email_from_name']	= 'example name';
	# $GLOBALS['cfg']['email_from_email']	= 'admin@example.com';
	# $GLOBALS['cfg']['auto_email_args']	= '-admin@example.com';

	#
	# You MAY want to change these
	#
	
	# $GLOBALS['cfg']['auth_cookie_name'] = 'a';
	# $GLOBALS['cfg']['auth_cookie_secure'] = 0;		# see also: http://github.com/blog/737-sidejack-prevention
	# $GLOBALS['cfg']['auth_cookie_httponly'] = 0;

	#
	# Another way of dealing with all the password/secrets hoo-hah  would be to create an entirely new
	# PHP file which is located somewhere safe (and outside of source control) and then to include it
	# at the end of this file. For example:
	#
	# $GLOBALS['cfg']['example_some_password'] = 's33kret';
	#
	# Would become:
	#
	# $GLOBALS['cfg']['example_some_password'] = 'READ-FROM-SECRETS';
	# include_once("your-secrets-file.php");
	#

?>