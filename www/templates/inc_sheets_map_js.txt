{literal}
<script type="text/javascript">

function collect_headers(){

	var headers = $("#user_sheets thead tr").map(function(i, row){

		var _headers = [];

		$(row).find("th").each(function(col, th){
			_headers.push($(th).text().toLowerCase());
		});

		return _headers;
	});

	return headers;
}

function sheet_onclick(sheetid){

	var sheet = sheet_getinfo(sheetid);

	if (sheet){		
		location.href = sheet.url;
	}
}

function sheet_onmouseover(sheetid){

	var sheet = sheet_getinfo(sheetid);

	if (! sheet['id']){
		return;
	}	

	var tlen = _dotspotting.sheets_list_mouseout_timers.length;

	for (var i = 0; i < tlen; i++){
		clearTimeout(_dotspotting.sheets_list_mouseout_timers.pop());
	}

	var html = 'This is sheet #<a href="' + sheet['url'] + '">' + htmlspecialchars(sheet['id']) + '</a>';

	if ((sheet.ownerid) && (sheet.ownerid != _dotspotting.user.id)){
		html += ', by ' + htmlspecialchars(sheet.owner);
	}

	else {
		html += ', by you';
	}

	html += '.';

	if (sheet['label']){
		html += ' It is labeled <q>' + htmlspecialchars(sheet['label']) + '</q>.';
	}

	var count_dots = sheet['countdots_public'];

	if (count_dots){

		if (count_dots > 1){
			html += ' It has ' + htmlspecialchars(count_dots) + ' dots.';
		}

		else {
			html += ' It has ' + htmlspecialchars(count_dots) + ' dot.';
		}
	}

	$("#map_info").html(html);
	$("#map_info").show();

	sheet_highlight_tr(sheetid);
}

function sheet_onmouseout(sheetid){

	var html = $("#map_info").html();
	html = html.replace(/^This is/, 'That was');

	$("#map_info").html(html);

	var tid = setTimeout(function(){

		$("#map_info").fadeOut('slow', function(){
			$("#map_info").html('');
		});

		sheet_restore_tr();

	}, 8000);

}

function sheet_highlight_tr(sheetid){

	sheet_restore_tr();

	var selector = "#sheetslist_sheet_" + sheetid + " td";

	_dotspotting['highlighted'] = sheetid;

	$(selector).map(function(i, el) {
		var new_classes = el.getAttribute("class") + " highlighted";
		el.setAttribute("class", new_classes);
	});
}

function sheet_restore_tr(){

	var current = _dotspotting['highlighted'];

	if (! current){
		return;
	}

	var selector = "#sheetslist_sheet_" + current + " td";

	$(selector).map(function(i, el){
		var new_classes = el.getAttribute("class").replace(" highlighted", "");
		el.setAttribute("class", new_classes);
	});

	_dotspotting['highlighted'] = null;
}

function sheet_getinfo(sheetid){

    if (_dotspotting.sheets_list_sheets[sheetid]){	
       return _dotspotting.sheets_list_sheets[sheetid];
    }      

    var row = $("#sheetslist_sheet_" + sheetid);
    var sheet = row2sheet(row);

    _dotspotting.sheets_list_sheets[sheetid] = sheet;
    return sheet;
}

function row2sheet(row, headers){

	var sheet = {};

	$(row).find("td").each(function(col, td){

		var classes = $(td).attr("class");
		var key = (headers) ? headers[col].toLowerCase() : null;

		if (classes){

			var match = classes.match(/\bsheetslist_([a-z_]+)\b/);

			if (match){
				key = match[1];
			}
		}

		if (! key){
			return {};
		}

		var value = $(td).text();
		value = value.replace(/^\s+/, '');
		value = value.replace(/\s+$/, '');
		
		if (key == 'extent'){
			var _extent = value.split(' ');
			value = (_extent.length == 4) ? _extent : null;
		}

		else if (key == 'label'){
			value = (value == 'â€”') ? null : value;
		}

		else if (key == 'owner'){

			// I am not convinced this is the right way to do this...

			var ownerid = $(td).attr("ds:owner_id");

			if (ownerid){
				sheet['ownerid'] = Number(ownerid);
			}
		}

		else {}

		sheet[ key ] = value;
	});

	if (sheet['id']){
		sheet['url'] = _dotspotting.abs_root_url + 'u/' + encodeURIComponent(sheet['ownerid']) + '/sheets/' + encodeURIComponent(sheet['id']) + '/';
	}

	return sheet;
}

function collect_sheets(){

	var headers = collect_headers();

	var swlat = null;
	var swlon = null;
	var nelat = null;
	var nelon = null;

	var sheets = new Array();

	var features = $("#user_sheets tbody tr").map(function(i, row){

		var sheet = row2sheet(row, headers);

		if ((! sheet['id']) || (! sheet['extent'])){
			return;
		}

		var sw = {
			lat: parseFloat(sheet.extent[0]),
			lon: parseFloat(sheet.extent[1])
		};

		var ne = {
			lat: parseFloat(sheet.extent[2]),
			lon: parseFloat(sheet.extent[3])
		};

		swlat = (swlat) ? Math.min(swlat, sw.lat) : sw.lat;
		swlon = (swlon) ? Math.min(swlon, sw.lon) : sw.lon;
		nelat = (nelat) ? Math.max(nelat, ne.lat) : ne.lat;
		nelon = (nelon) ? Math.max(nelon, ne.lon) : ne.lon;

		var nw = { 'lat': ne['lat'], 'lon': sw['lon'] };
		var se = { 'lat': sw['lat'], 'lon': ne['lon'] };

		var poly = [[
			[sw['lon'], sw['lat']],
			[nw['lon'], nw['lat']],
			[ne['lon'], ne['lat']],
			[se['lon'], se['lat']],
			[sw['lon'], sw['lat']]
		]];

		sheets.push(sheet);

		return {
			'geometry' : {
				'type' : 'Polygon',
				'coordinates' : poly,
			},

			'properties' : sheet,
		};

	});

	var extent = [
		{ lat: swlat, lon: swlon },
		{ lat: nelat, lon: nelon },
	];

	return {
		'extent': extent,
		'features': features
	};
}

function draw_map_modestmaps(sheets){

	var _extent = utils_adjust_bbox(sheets['extent']);

	var extent = [
		new com.modestmaps.Location(_extent[0]['lat'], _extent[0]['lon']),
		new com.modestmaps.Location(_extent[1]['lat'], _extent[1]['lon']),
	];

	var map = utils_modestmap('map');
	map.setExtent(extent);

	// This is not awesome but in the absence of a reliable way to
	// read CSS declaration in JS (does one exist now?) it's just
	// what we're going to do for now. See also: main.css .dot and
	// .dot:hover (20101207/straup)

	var attrs = {
		'fill' : '#00112d',
		'fill-opacity' : .5,
		'stroke' : '#99cc00',
		'stroke-width' : 4,
		'stroke-opacity' : 1,
	};

	var attrs_hover = {
		'fill' : '#00ddee',
		'fill-opacity' : .1,
		'stroke' : '#00112d',
		'stroke-width' : 4,
		'stroke-opacity' : 1,
	};

	var more = {
		'attrs' : attrs,

		// just inline the function mostly so that we don't
		// have to redeclare the attrs_* hashes again
		// (20101207/straup)

		'onload' : function(el, props){

			el.mouseout(function (evt) {
				this.attr(attrs);
				sheet_onmouseout(props.id);
			});

			el.mouseover(function (evt) {
				this.attr(attrs_hover);
				sheet_onmouseover(props.id);
			});
		},
	};

	var markers = new com.modestmaps.Markers(map);
	markers.drawGeoJson(sheets['features'], more);

	utils_modestmaps_add_compass(map);
	return;
}

function draw_map_polymaps(sheets){

	var map = utils_polymap('map');

	var extent = utils_adjust_bbox(sheets['extent']);
	
	map.extent(extent);
	map.zoom(Math.floor(map.zoom()));

	// ok go!

	var boxes = org.polymaps.geoJson();
	boxes.features(sheets['features']);
	boxes.on("load", utils_polymaps_assign_sheet_properties);

	map.add(boxes);

	utils_polymaps_add_compass(map);
	return 1;
}

function draw_map(){

	utils_scrub_map();

	var sheets = collect_sheets();

	if (_dotspotting.use_polymaps){	
		draw_map_polymaps(sheets);
		return;
	}

	draw_map_modestmaps(sheets);
}
	
utils_load_map();

</script>
{/literal}
