{literal}
<style type="text/css">
.col_preprocess_error {
background-color: pink;
}
</style>
{/literal}

<h2>Data Inspector</h2>

	<p>Here are all of the dots we found in your document. You can use this page to update individual columns (just click on a column to edit it) or delete entire rows if necessary. When you're done checking your dots, just hit <a href="#submit">submit button at the bottom of the page</a> and your dots will be added to Dotspotting.</p>

{if $errors|@count}

<p>Hey look! We found the following errors in your data:</p>

<ul>
{foreach from=$errors item="row"}
<li><strong>The <q>{$row.column|escape}</q> column in <a href="#row{$row.record|escape}">row #{$row.record|escape}</a>:</strong> {$row.error|escape}</li>
{/foreach}
</ul>

{/if}

<p style="font-size:11px;font-style:italic;">TO DO: Geocoding still needs some work.</p>

{* begin creation of table *}
<div>
<div class="dataTables_filter"><label for="filter">Filter:</label><input type="text" id="filter" value=""></div>
<div id="pre_process_container" class="yui-skin-sam">
<table id="pre_process" class="ds_table">

<thead>
<tr>
<th>{* delete *}</th>
<th>{* row id *}row id</th>
{foreach from=$data.0 item="ignore" key="colname" name="headers"}
{assign var="col_idx" value=$smarty.foreach.headers.index}
	<th class="col_preprocess">
		<span class="colname">{$colname|escape}</span>
		<span>
		&#160;<a href="#" onclick="preprocess_update_col({$col_idx});return false;">[e]</a>
		&#160;<a href="#" onclick="preprocess_geocode_col({$col_idx});return false;">[g]</a>
		&#160;<a href="#" onclick="preprocess_delete_col({$col_idx});return false;" style="color:red;">[x]</a>
		</span>
	</th>
{/foreach}
</tr>
</thead>

<tbody>
{foreach from=$data item="row" name="records"}
{assign var="row_idx" value=$smarty.foreach.records.index+1}

<a name="row{$row_idx|escape}"></a>

<tr id="row_preprocess_{$row_idx|escape}">
{* see that? we're pass the smarty 0-based count *}
<td><a href="#" onclick="preprocess_delete_row({$smarty.foreach.records.index}); return false;" style="font-size:11px; color:red;">[x]</a></td>
<td>{$row_idx}</td>

{foreach from=$row item="value" name="columns" key="colname"}
{assign var="col_idx" value=$smarty.foreach.columns.index}
{assign var="col_class" value="col_preprocess"}
{assign var="col_ok" value="1"}

{if $errors.$row_idx and $errors.$row_idx.column==$columns.$col_idx}
{assign var="col_ok" value="0"}
{/if}

<td contenteditable="true" class="{$col_class}{if ! $col_ok} col_preprocess_error{/if}">{$value|escape}</td>

{/foreach}

</tr>

{/foreach}
</tbody>

</table>
</div>
</div>

<a name="#submit"></a>

<form action="{$cfg.abs_root_url}{if $upload_endpoint}{$upload_endpoint|escape:'url'}/{else}upload/{/if}" method="POST" enctype="multipart/form-data" accept-encoding="UTF-8" id="processed">

<div id="file_attributes">

	{$crumb_key|crumb_input}
	<input type="hidden" name="data" value="" />
	<input type="hidden" name="fingerprint" value="{$fingerprint|escape}" />

	{include file="inc_upload_file_attributes.txt"}

</div>

<div style="text-align:right;">
	<input type="SUBMIT" value="OKAY! IMPORT THIS DATA" />
</div>

</form>

{* MODAL WINDOW *}
<div id="myModal" class="reveal-modal">
	<h1>Geocoding a column</h1>
	<p>This may take a moment. I am here to prevent you from harming my process. Please don't leave until I tell you to.</p>
	<p id="modal_status"></p>
</div>

<script type="text/javascript" src="{$cfg.abs_root_url}javascript/yqlgeo.js"></script>
{* used to show a modal window when geocoding *}
<script type="text/javascript" src="{$cfg.abs_root_url}javascript/jquery.reveal.js"></script>
{* google client geocoder library *}
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>

{* YUI DATATABLE FILES *}
<!--CSS file (default YUI Sam Skin) -->
<link type="text/css" rel="stylesheet" href="http://yui.yahooapis.com/2.8.2r1/build/datatable/assets/skins/sam/datatable.css">
<!-- Dependencies -->
<script src="http://yui.yahooapis.com/2.8.2r1/build/yahoo-dom-event/yahoo-dom-event.js"></script>
<script src="http://yui.yahooapis.com/2.8.2r1/build/element/element-min.js"></script>
<script src="http://yui.yahooapis.com/2.8.2r1/build/datasource/datasource-min.js"></script>
<script src="http://yui.yahooapis.com/2.8.2r1/build/datatable/datatable-min.js"></script>


{literal}
<script type="text/javascript">
var mo,geocoder,dt;
$(document).ready(function(){
	mo = $('#myModal').reveal({closeonbackgroundclick: false,animation:'fade'});
	geocoder = new google.maps.Geocoder();
});


// build data table
YAHOO.util.Event.addListener(window, "load", function() {

	var YT = YAHOO.namespace('yahooTable');
	YT.headers = preprocess_collect_headers();
	YT.keys = [];
	YT.schema = [];
	
	
	YT.sortRowId = function(a, b, desc) {
		if(desc){
			return a.getData("row id") - b.getData("row id");
		}else{
			return b.getData("row id") - a.getData("row id");
		}
       };
			
	/* create table header scheme */
	for(i=0;i< YT.headers.length;i++){
		var title = (i == 1) ? "row id" : YT.headers[i];
		
		if(i == 0){
			YT.keys.push( {key:title,sortable:false} );
		}else if(i == 1){
			YT.keys.push( {key:title,sortable:true,formatter: "number",sortOptions:{sortFunction:YT.sortRowId}} );
		}else{
			YT.keys.push( {key:title,sortable:true,editor: new YAHOO.widget.TextareaCellEditor()} );
		}
		
		YT.schema.push({key:title});
	}
	
	YT.columnDefs = YT.keys;

	YT.dataSource = new YAHOO.util.DataSource(YAHOO.util.Dom.get("pre_process"));
	YT.dataSource.responseType = YAHOO.util.DataSource.TYPE_HTMLTABLE;
	YT.dataSource.responseSchema = {
	    fields: YT.schema
	};
	
	
	/* this is the filter function */
	YT.dataSource.doBeforeCallback = function (req,raw,res,cb) {
		// This is the filter function
 			var data = res.results || [],
     		filtered = [],
     		i,l,j,regEx;
		
		
		if (req) {
		req = req.toLowerCase();
		regEx =  new RegExp( YT.createRegex( req ) , "i" );
		
		for (i = 0, l = data.length; i < l; ++i) {
			
			for(j in data[i]){
				if(j.length){
					if ( regEx.test(data[i][j]) ) {
				        filtered.push(data[i]);
						break;
				    }
				}
			}

		}
     		res.results = filtered;
 			}

 			return res;
	};
	
	/* filter function helper */
	YT.createRegex = function( str ){
		var esc = [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^' ];
	  	var rep = new RegExp( '(\\' + esc.join('|\\') + ')', 'g' );
	  	return str.replace(rep, '\\$1');
	}

	/* CREATE TABLE from column definitions & dataSource */
	YT.dataTable = new YAHOO.widget.ScrollingDataTable("pre_process_container", YT.columnDefs, YT.dataSource,{width:"100%", height:"300px",renderLoopSize: 125});
	
	// for the public
	dt = YT;
	
	/* general methods */
	YT.preprocess_add_col_options = function(){
		// reset column options
		$(".yui-dt-hd th").each(function(i){
			if(i > 1){
				var target = $(this).find('div').eq(0);
				var str = '<span class="col_options">';
				str += '<a href="#" onclick="preprocess_update_col('+i+');return false;">[e]</a>';
				str += '&#160;<a href="#" onclick="preprocess_geocode_col('+i+');return false;">[g]</a>';
				str += '&#160;<a href="#" onclick="preprocess_delete_col('+i+');return false;" style="color:red;">[x]</a>';
				str += '</span>';
				$(target).append(str);
			}
	 	});
	}
	
	/* Collection of event callback functions */
	YT.tableReady = function(e){
		YT.dataTable.unsubscribe('initEvent',YT.tableReady);
		YT.preprocess_add_col_options();
		
		if(typeof preprocess_create_index == 'function') { 
			preprocess_create_index();
		}
	}
	
    YT.highlightEditableCell = function(oArgs) {
        var elCell = oArgs.target;
        if(YAHOO.util.Dom.hasClass(elCell, "yui-dt-editable")) {
            this.highlightCell(elCell);
        }
    };
	
	YT.rowDeleteHandler =function(oArgs){
		$(".yui-dt-data tr").map(function(i, row){

			var oRecord = dt.dataTable.getRecord(i);
			var newRowId = i+1;
			var action = "preprocess_delete_row(" + i + "); return false;";
			var delCol = $(row).find("td a").eq(0);

			console.log(newRowId);
			YT.dataTable.updateCell(oRecord,'row id',newRowId);
			
			if (delCol.length){
				delete_col = delCol[0];
				delete_col.setAttribute('onclick', action);
			}
			
		});
	};
	
	YT.columnChangeHandler = function(oArgs){
		YT.preprocess_add_col_options();

		if(typeof preprocess_create_index == 'function') { 
			preprocess_create_index();
		}	
	}
	
	
	/* Event group */
	YT.dataTable.subscribe('initEvent',YT.tableReady);
    YT.dataTable.subscribe("cellMouseoverEvent", YT.highlightEditableCell);
    YT.dataTable.subscribe("cellMouseoutEvent", YT.dataTable.onEventUnhighlightCell);
    YT.dataTable.subscribe("cellClickEvent", YT.dataTable.onEventShowCellEditor);
	YT.dataTable.subscribe("rowDeleteEvent", YT.rowDeleteHandler);
	YT.dataTable.subscribe("columnInsertEvent", YT.columnChangeHandler);
	YT.dataTable.subscribe("columnRemoveEvent", YT.columnChangeHandler);


	/* Filter-ish things */
	YT.filterTimeout = null;
	YT.updateFilter  = function () {
		// Reset timeout
		YT.filterTimeout = null;

		// Reset sort
		var state = YT.dataTable.getState();
		state.sortedBy = {key:'row id', dir:YAHOO.widget.DataTable.CLASS_ASC};

		// Get filtered data
		YT.dataSource.sendRequest(YAHOO.util.Dom.get('filter').value,{
			success : YT.dataTable.onDataReturnInitializeTable,
			failure : YT.dataTable.onDataReturnInitializeTable,
			scope   : YT.dataTable,
			argument: state
		});
	};

	YAHOO.util.Event.on('filter','keyup',function (e) {
		clearTimeout(YT.filterTimeout);
		setTimeout(YT.updateFilter,600);
	});
	
});



$("#processed").submit(function(){
	var data = preprocess_collect_data();
	data = JSON.stringify(data);
	$("input[type=hidden][name=data]").val(data);
});

function preprocess_create_index(){
	var headers = preprocess_collect_headers();
	var target = $('label[for="dots_index_on"]');
	
	$("#preprocess_indexOptions").html("");
	
	var _html = '<p id="preprocess_indexOptions">Available field names: ';
	for(i = 0;i<headers.length;i++){
		if(headers[i] && headers[i] != "row id"){
			_html += "<span>"+headers[i]+"</span>";
		}
	}
	
	_html += "</p>";
	
	$(target).after(_html);
}


function preprocess_collect_headers(){
	var headers;
	// is it pre yui markup
	if( $(".yui-dt-hd thead").length ){
	
		headers = $(".yui-dt-hd thead tr").map(function(i, row){

			var _headers = [];

			$(row).find("th").each(function(j, col){

				// method.chaining.is.a.tool.of.the.devil().parent()
				var header = $(col).find('span.yui-dt-label').text().toLowerCase()

				_headers.push(header);
			});

			return _headers;
		});
	}else{
		headers = $("#pre_process thead tr").map(function(i, row){

			var _headers = [];

			$(row).find("th").each(function(j, col){

				// method.chaining.is.a.tool.of.the.devil().parent()
				header = $(col).find('span.colname').text().toLowerCase()

				_headers.push(header);
			});

			return _headers;
		});
	}

	return headers;
}

function preprocess_collect_data(){
	if(!dt.dataTable)return;
	
	var rows = [];

	var headers = preprocess_collect_headers();

	$(".yui-dt-data tr").map(function(i, row){
		
		var oRecord = dt.dataTable.getRecord(i);
		rows.push(oRecord._oData);		
	});

	return rows;
}

// delete row
function preprocess_delete_row(idx){
	if(!dt.dataTable)return;
	
	var prompt = "Are you sure you want to delete this row?";

	if (! confirm(prompt)){
		return;
	}
	
	dt.dataTable.deleteRow(Number(idx));

}

function preprocess_update_col(idx){
	if(!dt.dataTable)return;
	var headers = preprocess_collect_headers();
	var colname = headers[idx];

	var update = prompt("New stuff");

	if (update == undefined){
		return;
	}

	if (! confirm("Are you sure you want to update all the \"" + colname + "\" column with: " + update)){
		return;
	}

	$(".yui-dt-data tr").map(function(i, row){
		var oRecord = dt.dataTable.getRecord(i);
		dt.dataTable.updateCell(oRecord,colname,update);
	});

	return;
}

function preprocess_delete_col(idx){
	if(!dt.dataTable)return;
	
	var headers = preprocess_collect_headers();
	var colname = headers[idx];

	if (! confirm("Are you sure you want to delete the \"" + colname + "\" column from all rows?")){
		return;
	}
	
	// Remove Column
	var col = dt.dataTable.getColumn(idx);
	var myRemovedColumn = dt.dataTable.removeColumn(col);
	
	return;
}

function addExtraColumns(arr,idx){
	if(!dt.dataTable)return;
	for(i in arr){
		// Insert a new Column
		dt.dataTable.insertColumn({
		    key: arr[i],
			sortable:true
		}, idx+1);
	}
}


function preprocess_geocode_col(idx){
	if(!dt.dataTable)return;
	
	//alert("please make me work...");
	//return;

	// because these will all be asynchronous api calls, should we block
	// all the other functions that may affect this column?
	// (20100207/straup)
	
	var headers = preprocess_collect_headers();
	var colname = headers[idx];
	
	var queueDone = false;
	var queue = $(".yui-dt-data tr").length;
	var queueTotal = queue;
	var thisClass = this;
	this.intTimer = window.setTimeout(function(e) {thisClass.closeModal()},3000);
	if(mo)mo.show();
	
	addExtraColumns(['latitude','longitude'],idx);

	$(".yui-dt-data tr").map(function(i, row){
		
		var oRecord = dt.dataTable.getRecord(i);
		
		var q = oRecord._oData[colname];
		
		// geocode using woeid or physical address
		if (q.match(/^woeid\:(\d+)$/)){
			yqlgeo.get(q, function(rsp){
				checkQueue();
				if(rsp.place.centroid){
				 if(window.console)console.log('rsp for ' + q + ' ... ' + rsp.place.centroid.latitude + "," + rsp.place.centroid.longitude);
				}else{
					if(window.console)console.log('No point location for ' + q + ' ... ');
				}

				if (rsp.error){
					queueDone = true;
					if(window.console)console.log("error");
					return;
				}
			});
		}else if(q.length > 5){
			geocoder.geocode( { 'address': q}, function(results, status) {
				checkQueue();
				if (status == google.maps.GeocoderStatus.OK) {
					dt.dataTable.updateCell(oRecord,"latitude",results[0].geometry.location.lat());
					dt.dataTable.updateCell(oRecord,"longitude",results[0].geometry.location.lng());
					//if(window.console)console.log("Geocode successful: "+results[0].geometry.location.lat()); //lng
				} else {
					dt.dataTable.updateCell(oRecord,"latitude","-");
					dt.dataTable.updateCell(oRecord,"longitude","-");
					//if(window.console)console.log("Geocode was not successful for the following reason: " + status);
				}
			});
		}else{
			checkQueue();
		}
		
	});
	
	function checkQueue(){
		queue--;
		if(queue <= 0){
			queueDone = true;
		}
		$("#modal_status").text(queue+"/"+queueTotal+" records left.");
		//if(window.console)console.log(queue);
	}
	
	this.closeModal = function(){
		if(queueDone){
			// close modal overlay
			if(mo)mo.close();
		}else{
			this.intTimer = window.setTimeout(function(e) {thisClass.closeModal()},3000);
		}
	}
	
}

</script>
{/literal}
