{literal}
<style type="text/css">
.col_preprocess_error {background-color: pink;}
#main .close-reveal-modal{font-size: 38px;top: 4px;left: 8px;color:#333}
#loader_table{position:relative;top:10%;left:5%;color:#999;font-size:16px;}
.geohide{display:none;}
strong{font-size: 15px;font-weight: 800;}
</style>
{/literal}


<h3>Upload to Dotspotting</h3>
<div id="upload_meezy">
<ul class="clearfix">
	<li class="first_meezy show_30"><span>Upload your file</span></li>
	<li class="second_meezy"><span>Check your dots</span></li>
</ul>
</div>

{* NO DATA  ??? *}
{if $data|@count == 0}
<h1>We could not parse your file!</h1>
{/if}

{* error display ? *}
{if $errors|@count}
{*
<p class="error">There was an error while processing your upload</p>

<ul>
{foreach from=$errors item="row"}
<li>{if $row.column}<strong>The <q>{$row.column|escape}</q> column in <a href="#row{$row.record|escape}">row #{$row.record|escape}</a>:</strong> {$row.error|escape}{else}<strong>There was a problem with <a href="#row{$row.record|escape}">row #{$row.record|escape}</a>:</strong> {$row.error|escape}{/if}</li>
{/foreach}
</ul>
*}
{/if}

<div id="loader_table">loading table...</div>
{* begin creation of table *}
<div>
<!-- <div class="dataTables_filter"><label for="filter">Filter:</label><input type="text" id="filter" value=""></div> -->
<div id="pre_process_container" class="yui-skin-sam" style="visibility: hidden;">
<table id="pre_process" class="ds_table">

<thead>
<tr>
<th>{* row id *}row id</th>
{foreach from=$data.0 item="ignore" key="colname" name="headers"}
{assign var="col_idx" value=$smarty.foreach.headers.index}
	<th class="col_preprocess">
			<span class="colname">{$colname|escape}</span>
	<!--	<a href="#" onclick="preprocess_delete_col({$col_idx});return false;""><img src="{$cfg.abs_root_url}images/x.png"/></a> -->
	</th>
{/foreach}
{* hidden title *}

{*
<th><span class="colname">title_internal</span></th>
*}
</tr>
</thead>

<tbody>
{foreach from=$data item="row" name="records"}
{assign var="row_idx" value=$smarty.foreach.records.index+1}

<a name="row{$row_idx|escape}"></a>

<tr id="row_preprocess_{$row_idx|escape}">
{* see that? we're pass the smarty 0-based count *}
<td>{$row_idx}<a href="#" onclick="preprocess_delete_row({$smarty.foreach.records.index}); return false;"><img src="{$cfg.abs_root_url}images/x.png"/></a></td>

{* fix problem where rows didn't have same length (seanc|4/13/2011) *}
{foreach from=$columns item="field" name="columns"}
{assign var="value" value=$row.$field}
{assign var="col_idx" value=$smarty.foreach.columns.index}
{assign var="col_class" value="col_preprocess"}
{assign var="col_ok" value="1"}

{if $errors.$row_idx and $errors.$row_idx.column==$columns.$col_idx}
{assign var="col_ok" value="0"}
{/if}
<td class="{$col_class}{if ! $col_ok} col_preprocess_error{/if}">{$value}</td> {* removed escape -- $value|escape *}

{/foreach}
{*
<td></td>
*}
</tr>

{/foreach}
</tbody>

</table>
</div>
</div>


{literal}
<script type="text/javascript">
	// how many indexes are there?
	var total_targets = Number( {/literal}{$cfg.dots_indexing_max_cols_list|@count}{literal} );

	// update indexes hidden field
	// checks for dupes
	function update_dots_index_field(){
		var str = "";
	
		for(var i=1;i<=total_targets;i++){
			var _current = $('#dots_index_on_'+i);
			var _val = _current.val();
			if(_val){
				if(str.indexOf(_val) == -1){
					if(str.length ) str += ",";
					str += _val;
				}else{
					$('#dots_index_on_'+i).val("");
				}
			}
		}	

		$("input[name='dots_index_on']").val(str);
	}

</script>
{/literal}


<a name="#submit"></a>

{if $pre_process.needs_geocoding}
<div class="section_bunch_o_text">
	<ul id="geoinstr" class="no_show">
	<li>
		<h4 class="importgood">Successfully parsed your file.</h4>
	</li>
	<li id="geocode_info">
		<h4 class="geoicon">To proceed, your file will need valid latitude and longitude values for each row.</h4>
		<p>You can use the "Geocode" button below or you can enter a latitude and longitude field in your spreadsheet and re-upload it.</p>
		<span id="geocodeBtn" class=""><input type="Button" value="Geocode" /></span>
	</li>
	</ul>

</div>
{/if}

<div class="section_bunch_o_text">

<form id="upload_file" action="{$cfg.abs_root_url}{if $upload_endpoint}{$upload_endpoint|escape:'url'}/{else}upload/{/if}" method="POST" enctype="multipart/form-data" accept-encoding="UTF-8">
	{$crumb_key|crumb_input}
	<input type="hidden" name="data" value="" />
	<input type="hidden" name="fingerprint" value="{$fingerprint|escape}" />
	
	<div {if $pre_process.needs_geocoding}class="geohide"{/if}>
	{* name sheet *}
	<p>
	<label for="label">Give your upload a name:</label>
	<input type="text" size="40" name="label" value="{$label|escape}" />
	</p>
	
	<hr/>
	
	{* select a title  | off *}
	{*
	<p>
	<label for="title">Select a title column:</label>
	<select id="dots_upload_title" onchange="update_dots_index_field();" name="title"></select><br/>
	</p>
	<p class="txt_helper">Values in this column will be used as the title for dots in both listings and individual <a href="{$cfg.abs_root_url}recent/dots" title="jump to recent dots">dot pages</a>. We suggest something short but descriptive.</p>
	
	<hr/>
	*}

	{* searchable columns | off *}
	{if $cfg.enable_feature_dots_indexing and ! $cfg.dots_indexing_index_all}
		<p id="dots_index_area">
		<label for="dots_index_opt">Select searchable columns (max:{$cfg.dots_indexing_max_cols|escape}):</label>

		<label for="title" style="margin-left:10px;color:#666">Use as title:</label><input type="checkbox" name="title"/>

		{foreach from=$cfg.dots_indexing_max_cols_list item="i"}
		<select id="dots_index_on_{$i|escape}" name="dots_index_opt_{$i|escape}" onchange="update_dots_index_field();"></select>
		{/foreach}

		<input type="hidden" name="dots_index_on" value="" /><br/>
		</p>
		<p class="txt_helper">The values of these columns will be indexed for searching both on sheets pages and in site-wide <a href="{$cfg.abs_root_url}search" title="jump to search page">search pages</a>. Street names, categorical columns, and tag or keyword lists are good candidates for search indexing. Note: The title column (above) is always searchable, so if a title is selected you will get one selection above</p>
		<hr/>
	{/if}
	
	{* private option *}
	<p>
	<label for="private">Make dots private</label>
	<input type="checkbox" name="private"{if $private} checked="true"{/if}/>
	</p>
	
	<hr/>
	</div>
	<span id="submitBtn" class="upload_submit"><input type="SUBMIT" value="Submit" /></span>
</form>
</div>

{* MODAL WINDOW *}
<div id="myModal" class="reveal-modal">
	<h1><img style="float: right;padding: 0 5px;" src="{$cfg.abs_root_url}images/frogs_ani.gif"/> Geocoding ...</h1>
	<p id="modal_msg">This may take a moment. I am here to prevent you from harming my process. Please don't leave until I tell you to.</p>
	<p id="modal_status" style="font-size: 16px;font-weight: bold;padding-top: 15px;color: #519394;"></p>
	<div class="meter blue">
	        <span style="width: 100%"></span>
	</div>
	<a class="close-reveal-modal no_show">&#215;</a>
</div>



<script type="text/javascript" src="{$cfg.abs_root_url}javascript/yqlgeo.js"></script>

{* used to show a modal window when geocoding *}
<script type="text/javascript" src="{$cfg.abs_root_url}javascript/jquery.reveal.js"></script>

{* google client geocoder library *}
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>

{* YUI DATATABLE FILES *}
<!-- Combo-handled YUI CSS files: -->
<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/combo?2.9.0/build/datatable/assets/skins/sam/datatable.css">
<!-- Combo-handled YUI JS files: -->
<script type="text/javascript" src="http://yui.yahooapis.com/combo?2.9.0/build/yahoo-dom-event/yahoo-dom-event.js&2.9.0/build/element/element-min.js&2.9.0/build/datasource/datasource-min.js&2.9.0/build/datatable/datatable-min.js"></script>

{literal}
<script type="text/javascript">

var mo,
	geocoder,
	dt,
	gc_ok = false,
	_processedRows = {};
	
$(document).ready(function(){
	
	// check repsonse from aaron to see if geocoding is necessary
	 gc_ok = {/literal}
	{if $pre_process.needs_geocoding}
	{literal}0{/literal}
	{else}
	{literal}1{/literal}
	{/if}
	{literal};
	
	geocoder = new google.maps.Geocoder();
	
	if(!gc_ok){
		$("#geocodeBtn").click(function(e){
			e.preventDefault();
			if(!dt)return;
			preprocess_geocode_col();
		});
		$("#submitBtn input").attr('disabled', 'disabled');
		$("#submitBtn input").css('cursor','none');
		$("#submitBtn").css('opacity',.3);
	}else{
		$("#geocodeBtn").hide();
		$("#geocode_msg").hide();
	}

});


// build data table
YAHOO.util.Event.addListener(window, "load", function() {

buildDataTable();
	
});


function buildDataTable(){

	var YT = YAHOO.namespace('yahooTable');
	YT.headers = preprocess_collect_headers();
	YT.keys = [];
	YT.schema = [];

	// TODO: filter out delete link before sort
	YT.sortRowId = function(a, b, desc) {
		var $a = a.getData("row id").split(/^(\d+)/);
		var $b = b.getData("row id").split(/^(\d+)/);
	
		if(desc){
			return Number($a[1]) - Number($b[1]);
		}else{
			return Number($b[1]) - Number($a[1]);
		}
	   };
	//editor: new YAHOO.widget.TextareaCellEditor()
	/* create table header scheme */
	for(i=0;i< YT.headers.length;i++){
		var title = (i == 0) ? "row id" : YT.headers[i];
		if(title.length){
			if(i == 0){
				YT.keys.push( {key:title,sortable:true,sortOptions:{sortFunction:YT.sortRowId}, minWidth:50} );
			}else if(title == "_has_latlon" || title == "_address"){
				YT.keys.push( {key:title,sortable:false,hidden:true} );
			}else{
				YT.keys.push( {key:title,sortable:true,minWidth:100} );
			}
	
			YT.schema.push({key:title});
		}
	}

	YT.columnDefs = YT.keys;

	YT.dataSource = new YAHOO.util.DataSource(YAHOO.util.Dom.get("pre_process"));
	YT.dataSource.responseType = YAHOO.util.DataSource.TYPE_HTMLTABLE;
	YT.dataSource.responseSchema = {
	    fields: YT.schema
	};


	/* this is the filter function */
	YT.dataSource.doBeforeCallback = function (req,raw,res,cb) {
		// This is the filter function
			var data = res.results || [],
	 		filtered = [],
	 		i,l,j,regEx;
	
	
		if (req) {
		req = req.toLowerCase();
		regEx =  new RegExp( YT.createRegex( req ) , "i" );
	
		for (i = 0, l = data.length; i < l; ++i) {
		
			for(j in data[i]){
				if(j.length){
					if ( regEx.test(data[i][j]) ) {
				        filtered.push(data[i]);
						break;
				    }
				}
			}

		}
	 		res.results = filtered;
			}

			return res;
	};

	/* filter function helper */
	YT.createRegex = function( str ){
		var esc = [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^' ];
	  	var rep = new RegExp( '(\\' + esc.join('|\\') + ')', 'g' );
	  	return str.replace(rep, '\\$1');
	}

	/* CREATE TABLE from column definitions & dataSource */
	YT.dataTable = new YAHOO.widget.ScrollingDataTable("pre_process_container", YT.columnDefs, YT.dataSource,{width:"100%", height:"300px",renderLoopSize: 125});

	// for the public
	dt = YT;

	/* general methods */
	YT.preprocess_add_col_options = function(){
		// reset column options
		/*
		$(".yui-dt-hd th").each(function(i){
			if(i > 0){
				var target = $(this).find('div').eq(0);
				var str = '';
				str += '<a href="#" onclick="preprocess_delete_col('+i+');return false;"><img src="'+_dotspotting.abs_root_url+'images/x.png"/></a>';
			
				$(target).append(str);
			}
	 	});
		*/
	}

	/* Collection of event callback functions */
	YT.tableReady = function(e){
		$("#pre_process_container").css('visibility', 'visible');
		$("#loader_table").remove();
		$("#geoinstr").show();
		preprocess_checkLatLon();
		
		YT.dataTable.unsubscribe('initEvent',YT.tableReady);
		YT.preprocess_add_col_options();
	
		if(typeof preprocess_create_index == 'function') { 
			preprocess_create_index();
		}
	
	}

	YT.highlightEditableCell = function(oArgs) {
	    var elCell = oArgs.target;
	    if(YAHOO.util.Dom.hasClass(elCell, "yui-dt-editable")) {
	        this.highlightCell(elCell);
	    }
	};

	YT.rowDeleteHandler = function(oArgs){
		$(".yui-dt-data tr").map(function(i, row){

			var oRecord = dt.dataTable.getRecord(i);
			var newRowId = i+1;
			var action = "preprocess_delete_row(" + i + "); return false;";
			var delCol = $(row).find("td a").eq(0);
		
			newRowId += '<a href="#" onclick="preprocess_delete_row('+i+'); return false;"><img src="'+_dotspotting.abs_root_url+'images/x.png"/></a>';
		
			YT.dataTable.updateCell(oRecord,'row id',newRowId);
		
			if (delCol.length){
				delete_col = delCol[0];
				delete_col.setAttribute('onclick', action);
			}
		
		});
	};

	YT.columnChangeHandler = function(oArgs){
		YT.preprocess_add_col_options();

		if(typeof preprocess_create_index == 'function') { 
			preprocess_create_index();
		}	
	}


	/* Event group */
	YT.dataTable.subscribe('initEvent',YT.tableReady);
	YT.dataTable.subscribe("cellMouseoverEvent", YT.highlightEditableCell);
	YT.dataTable.subscribe("cellMouseoutEvent", YT.dataTable.onEventUnhighlightCell);
	YT.dataTable.subscribe("cellClickEvent", YT.dataTable.onEventShowCellEditor);
	YT.dataTable.subscribe("rowDeleteEvent", YT.rowDeleteHandler);
	YT.dataTable.subscribe("columnInsertEvent", YT.columnChangeHandler);
	YT.dataTable.subscribe("columnRemoveEvent", YT.columnChangeHandler);


	/* Filter-ish things */
	YT.filterTimeout = null;
	YT.updateFilter  = function () {
		// Reset timeout
		YT.filterTimeout = null;

		// Reset sort
		var state = YT.dataTable.getState();
		state.sortedBy = {key:'row id', dir:YAHOO.widget.DataTable.CLASS_ASC};

		// Get filtered data
		YT.dataSource.sendRequest(YAHOO.util.Dom.get('filter').value,{
			success : YT.dataTable.onDataReturnInitializeTable,
			failure : YT.dataTable.onDataReturnInitializeTable,
			scope   : YT.dataTable,
			argument: state
		});
	};

	YAHOO.util.Event.on('filter','keyup',function (e) {
		clearTimeout(YT.filterTimeout);
		setTimeout(YT.updateFilter,600);
	});

}



$("#upload_file").submit(function(e){
	//e.preventDefault();
	if(gc_ok){
		var data = preprocess_collect_data();
		console.log(data);
		data = JSON.stringify(data);
		$("input[type=hidden][name=data]").val(data);
	}else{
	e.preventDefault();
	}
});

// auto fill the index lists
// TODO: do we want to auto determine title field?
function preprocess_create_index(){
	if(!total_targets && total_targets.length > 0)return;
	
	var headers = preprocess_collect_headers();	
	
	var _html = '<option value=""></option>';
	for(i = 0;i<headers.length;i++){
		if(headers[i] && headers[i] != "row id" && headers[i] != "title_internal"){
			_html += "<option value='"+headers[i]+"'>"+headers[i]+"</option>";
		}
	}
	
	for(var i=1;i<=total_targets;i++){
		var target_list = $('#dots_index_on_'+i);
		target_list.html("").append(_html);
	}
	
}

function preprocess_collect_headers(){
	var headers;
	// is it pre yui markup
	if( $(".yui-dt-hd thead").length ){
	
		headers = $(".yui-dt-hd thead tr").map(function(i, row){

			var _headers = [];

			$(row).find("th").each(function(j, col){

				// method.chaining.is.a.tool.of.the.devil().parent()
				var header = $(col).find('span.yui-dt-label').text().toLowerCase()

				_headers.push(header);
			});

			return _headers;
		});
	}else{
		headers = $("#pre_process thead tr").map(function(i, row){

			var _headers = [];

			$(row).find("th").each(function(j, col){

				// method.chaining.is.a.tool.of.the.devil().parent()
				header = $(col).find('span.colname').text().toLowerCase()

				_headers.push(header);
			});

			return _headers;
		});
	}

	return headers;
}

function preprocess_checkLatLon(){
	$(".yui-dt-data tr").each(function(i){
		var r = dt.dataTable.getRecord(i);
		var b = Number(oRecord._oData['_has_latlon']);
		var _id = "r"+r._nCount;
		if(b){
			_processedRows[_id] = "good";
		}else{
			_processedRows[_id] = "bad";
		}

	});
}

function preprocess_collect_data(){
	if(!dt.dataTable)return;
	
	/* legacy
	var _title = "";
	
	if($("input[name='title']").is(':checked')) {
		_title = $('#dots_index_on_1').val();
	}
	*/
	
	
	var rows = [];
	var headers = preprocess_collect_headers();
	
	$(".yui-dt-data tr").map(function(i, row){
		var oRecord = dt.dataTable.getRecord(i);
		
		// strip link out of row id
		//var $a = oRecord.getData("row id").split(/^(\d+)/);
		//dt.dataTable.updateCell(oRecord,"row id",$a[1]);
		
		/* legacy
		// add title
		if(_title.length){
			dt.dataTable.updateCell(oRecord,"title_internal","{"+_title+"}");
		}
		*/
		
		
		// get rid of row id, because we created them in first place sucka
		if(oRecord._oData['row id']){
			delete oRecord._oData['row id'];
		}
		
		
		if(oRecord._oData['_has_latlon']){
			delete oRecord._oData['_has_latlon'];
		}
		if(oRecord._oData['_address']){
			delete oRecord._oData['_address'];
		}
		
		rows.push(oRecord._oData);		
	});

	return rows;
}

// delete row
function preprocess_delete_row(idx){
	if(!dt.dataTable)return;
	
	var prompt = "Are you sure you want to delete this row?";

	if (! confirm(prompt)){
		return;
	}
	
	dt.dataTable.deleteRow(Number(idx));

}

function preprocess_update_col(idx){
	if(!dt.dataTable)return;
	var headers = preprocess_collect_headers();
	var colname = headers[idx];

	var update = prompt("New stuff");

	if (update == undefined){
		return;
	}

	if (! confirm("Are you sure you want to update all the \"" + colname + "\" column with: " + update)){
		return;
	}

	$(".yui-dt-data tr").map(function(i, row){
		var oRecord = dt.dataTable.getRecord(i);
		dt.dataTable.updateCell(oRecord,colname,update);
	});

	return;
}

function preprocess_delete_col(idx){
	if(!dt.dataTable)return;
	
	var headers = preprocess_collect_headers();
	var colname = headers[idx];

	if (! confirm("Are you sure you want to delete the \"" + colname + "\" column from all rows?")){
		return;
	}
	
	// Remove Column
	var col = dt.dataTable.getColumn(idx);
	var myRemovedColumn = dt.dataTable.removeColumn(col);
	
	return;
}

function checkHeaderExists(idx){
	return (dt.dataTable.getColumn(idx)) ? true : false;
}

function addExtraColumns(arr,idx){
	if(!dt.dataTable)return;
	
	// need to insert new columns after hidden because of a bug in YUI DataTables
	//var last = (dt.dataTable.getColumn("title_internal")) ? dt.dataTable.getColumn("title_internal") : dt.columnDefs.length-1;
	var last =  dt.columnDefs.length-1;
	
	// insert now
	for(i in arr){
		if(!checkHeaderExists(arr[i])){
			dt.dataTable.insertColumn({
			    key: arr[i],
				label: arr[i],
				minWidth:50,
				sortable:true
			}, last._nKeyIndex+1);
		}
	}
	
}


function preprocess_geocode_col(idx){
	if(!dt || !dt.dataTable)return;
	
		
	var self = this;
	this.intTimer = null;
	
	// get this from aaron
	this.addressColumn = dt.dataTable.getColumn("address");
	this.addressColumnID = this.addressColumn._nKeyIndex;
	
	this.errors = {'ct':0,'addr':[],'err':[]};
	this.success = {'ct':0,'addr':[],'msgs':[]};
	this.currentAddy = undefined;
	this.currentAddyTries = undefined;
	
	var queueDone = false;
	var queue = $(".yui-dt-data tr");
	var queueLength = queue.length;
	var queueCounter = 0;
	
	this.queueBatch = 5; // basic throttler for geocoder, also catching 'OVER_QUERY_LIMIT' response to help throttle requests
	
	$(".meter > span").animate({width: "0%"}, 0);
		
		
	this.gc = function(q){
		var _id = "r"+q._nCount;
		
		//testing
/*
		if(_processedRows[_id] && _processedRows[_id] == "good"){
			// skip this row
		}else{
			var gb = (queueCounter %2 == 0) ? true : false;
			if(gb){
				self.success.ct++;
				_processedRows[_id] = "good";
			}else{
			 	self.errors.ct++;
				$("#"+q._sId).css("background-color","#e9b8b8");
				_processedRows[_id] = "bad";
			}
			var addy = q['_oData']['_address'];
			// update status
			//var out = "Processed: "+queueCounter+" of "+queueLength+"</br>";
			var out = "Processing: "+addy;
			$("#modal_status").html(out);
			
			var pct = (queueCounter/queueLength) * 100;
			$(".meter > span").animate({width: pct + "%"}, 0);
			
		}
		self.checkQueue(150);
		
*/
	

		// don't process rows already with valid responses
		if(_processedRows[_id] && _processedRows[_id] == "good"){
			self.checkQueue(10);
		}else{
			if(q['_oData'] && q['_oData']['_address'] && q['_oData']['_address'].length > 2){
			
				var addy = q['_oData']['_address'];
				if(!self.currentAddy){
					self.currentAddy = addy;
					self.currentAddyTries = 0;
				}
			
				//this.intTimer = window.setTimeout(function(e) {self.closeModal()},4000);
				
				// update status
				//var out = "Processed: "+queueCounter+" of "+queueLength;
				var out = "Processing: "+addy;
				$("#modal_status").html(out);
				
				var pct = (queueCounter/queueLength) * 100;
				$(".meter > span").animate({
                        width: pct + "%"
                }, 1200);
				

				// geocode
				geocoder.geocode( { 'address': addy}, function(results, status) {
				
					// we're good
					// TODO: should we check for level of accuracy
					if (status == google.maps.GeocoderStatus.OK) {
						dt.dataTable.updateCell(q,"latitude",results[0].geometry.location.lat());
						dt.dataTable.updateCell(q,"longitude",results[0].geometry.location.lng());
						if(window.console)console.log(results); //lng
						self.success.ct++;
						self.success.addr.push(addy);
						$("#"+q._sId).css("background-color","#EEE");
						_processedRows[_id] = "good";
						
					} else {
					
						// if we get this error, set a delay and try again
						if(status == "OVER_QUERY_LIMIT" && self.currentAddyTries < 3){
							self.currentAddyTries++;
							self.delayGC(q);
							return;
						}
						
						dt.dataTable.updateCell(q,"latitude","###");
						dt.dataTable.updateCell(q,"longitude","###");
						
						if(window.console)console.log("Geocode was not successful for the following reason: " + status);
						self.errors.ct++;
						self.errors.addr.push(addy);
						self.errors.err.push(status);
						$("#"+q._sId).css("background-color","#FA5C5C");
						_processedRows[_id] = "bad";
					}
					
					self.queueBatch--;
					if(self.queueBatch <= 0){
						self.queueBatch = 5;
						self.checkQueue(500);
					}else{
						self.checkQueue(100);
					}
				});
			
			}else{
				self.checkQueue(10);
			}
		}
		

		
		
	}
	
	
	// delay some googling
	this.delayGC = function(o){
		setTimeout(function(){
			self.gc(o);
		}, 1500);
	}
	
	this.checkQueue = function(wait){
		// clear
		self.currentAddy = undefined;
		self.currentAddyTries = 0;
		
		queueCounter++;
		if(queueCounter < queueLength){
			setTimeout(function(){
				self.gc(dt.dataTable.getRecord(queueCounter));
			}, wait);
			
		}else{			
			
			var out_h4 = '';
			var out_p = '';
			if(self.success.ct == 0 && self.errors.ct == 0){
			
				out_h4 = 'Geocoding failure!';
				//out += '<img style="float: right;padding: 5px;" src="'+_dotspotting.abs_root_url+'images/funny_cat.gif" width="160"/>';
				out_p = "<strong>Nothing geocoded. Are there addresses? Please fix problem in original source.  <a href='"+_dotspotting.abs_root_url+"upload'>Then re-upload the file.</a></strong>";
				$("#geocode_info h4").css("background-color","#e9b8b8");
			}else if(self.errors.ct == 0){
				out_h4 = 'Successfully geocoded all your locations, you may now finish up and upload your dots.';
				out_p = '';
				$("#geocode_info h4").css("background-color","#B5D6D8");
			}else{
				out_h4 = 'Not all your locations could be geocoded!';
				//out = '<img style="float: right;padding: 5px;" src="'+_dotspotting.abs_root_url+'images/funny_cat.gif" width="160"/>';
				out_p = "<strong>Good news:</strong> "+self.success.ct+" locations were geocoded.<br/>";
				out_p += "<strong>Bad new:</strong> "+self.errors.ct+" failed.<br/>";
				out_p += "<strong>Make note of the highlighted rows and fix the data in your original source. <a href='"+_dotspotting.abs_root_url+"upload'>Then re-upload the file.</a></strong></br>";
				out_p += "<i>Common problems are road types like (Street and Ave.) are missing, mis-spelled place names, no city or state, etc...</i>";
				$("#geocode_info h4").css("background-color","#e9b8b8");
			}
			
			
			//geoinstr
			$("#geocode_info h4").html(out_h4);
			$("#geocode_info p").html(out_p);
			mo.trigger("reveal:close");
			//self.closeModal();
			
			
			
			/*
			$("#modal_status").html("");
			$("#modal_msg").html(out);
			$(".close-reveal-modal").show();
			*/
		}
	}
	
	this.closeModal = function(){				
		queueBatch = 5;
		if(self.errors.ct <= 0){
			gc_ok = true;
			
			$("#geocodeBtn").hide();
			//$("#geoinstr").hide();
			$("#geoinstr p").remove();
			$("div.geohide").removeClass("geohide");
		//	$("#submitBtn").show();
			$("#submitBtn input").attr('disabled', '');
			$("#submitBtn input").css('cursor','pointer');
			$("#submitBtn").css('opacity',1);
		}else{
			$("#geocodeBtn").hide();
		}
		
	}	
	
	mo = $('#myModal').reveal({closeonbackgroundclick: false,animation:'fade', closeCallback: self.closeModal});
	addExtraColumns(['latitude','longitude'],idx);
	dt.dataTable.render();
	
	
	// start
	if(queueLength > 0){
		self.gc(dt.dataTable.getRecord(queueCounter));
	}
		
	
}




</script>
{/literal}
