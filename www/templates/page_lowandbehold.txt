{assign var="page_title" value="Low & Behold!"}
{capture assign="extra_head"}
	<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
	<style>
	{literal}
	#map_wrapper.fullscreen{
	position:fixed;
	top:0;
	left:0;
	margin:0;
	padding:0;
	width:100%;
	height:100%;
	background:#fff;
	z-index:3999;
	}
	#map.fullscreen{
	width:100%;
	height:100%;
	}
	#map_wrapper.lowandbehold #map.fullscreen{height:100%;}
	#fllscreen{
	position:absolute;
	top:-8px;
	right:-8px;
	z-index:5000;
	background:rgba(255,255,255,1);
	padding:2px 3px 1px 4px;
	}
	#map_wrapper.fullscreen #fllscreen{
	top:2px;
	right:2px;
	}
	{/literal}
	</style>
{/capture}
{include file="inc_head.txt"}
<div class="section_bunch_o_text">
<h2>Find a place:</h2>

<form id="find_place_form" onsubmit="return false;">
   <span class="label">Enter a place here:</span>
   <input id="findme_str" value="" style="width:500px;padding:4px;"/>
   <input id="findBtn" type="Button" value="Find..." />
   <p id="find_place_error" class="error" style="display:none;"></p>
</form>

</div>
<div id="map_wrapper" class="lowandbehold">
	<div id="map">{* don't put anything in here *}</div>
	{* if maptiles_license empty do not display license *}
	{if $cfg.maptiles_license|count}
	<div id="map_license">{$cfg.maptiles_license}</div>
	{/if}
	<div id="map_info"></div>
	<div id="map_controls">
		<a href="#" id="pan_left" title="pan left"><img src="{$cfg.abs_root_url}images/map/pan-left.png"/></a>
		<a href="#" id="pan_up" title="pan up"><img src="{$cfg.abs_root_url}images/map/pan-up.png"/></a>
		<a href="#" id="pan_right" title="pan right"><img src="{$cfg.abs_root_url}images/map/pan-right.png"/></a>
		<a href="#" id="pan_down" title="pan down"><img src="{$cfg.abs_root_url}images/map/pan-down.png"/></a>
		<a href="#" id="zoom_in" title="zoom in"><img src="{$cfg.abs_root_url}images/map/zoom-in.png"/></a>
		<a href="#" id="zoom_out" title="zoom out"><img src="{$cfg.abs_root_url}images/map/zoom-out.png"/></a>
	</div>
    <div id="fllscreen"><img src="{$cfg.abs_root_url}images/map/fullscreen.png" width="14" height="14"/></div>
</div>


{literal}
<script type="text/javascript">
var geocoder = null;
var map = null;

$(document).ready(function(){
    _dotspotting.fullscreen_flag = 0;
    utils_load_map();
    geocoder = new google.maps.Geocoder();
    $('#find_place_form').live("submit", function(e) {
        e.preventDefault();
        if(!geocoder)return;
        if($("#findme_str").val()){
            findMe($("#findme_str").val());
            //doErr();
        }else{
            doErr("Oops, please enter a place name, like Brooklyn Zoo or Charles Town, WV")
        }
    });
    $("#fllscreen").toggle(
    function(e){
        e.preventDefault();
        _dotspotting.fullscreen_flag = 1;
        $("#map_wrapper").removeClass("fullscreen").addClass("fullscreen");
        $("#map").removeClass("fullscreen").addClass("fullscreen");
         
         if (_dotspotting.use_polymaps){
            map.resize();
            map.center(map.center());
         }else{
            map.setSize($("#map_wrapper").width(),$("#map_wrapper").height());
            map.setCenter(map.getCenter());
         }

    },
    function(e){
        e.preventDefault();
         _dotspotting.fullscreen_flag = 0;
        $("#map_wrapper").removeClass("fullscreen");
        $("#map").removeClass("fullscreen");
        if (_dotspotting.use_polymaps){
            map.resize();
            map.center(map.center());
         }else{
            map.setSize($("#map_wrapper").width(),$("#map_wrapper").height());
            map.setCenter(map.getCenter());
         }
    });
    
    

    
});


function doErr(x){
    if(!x || !x.length){
        $("#find_place_error").html("").hide();
    }else{
        $("#find_place_error").html(x).show();
    }
}

function updateMap(args){
    if(!map)return;
    if (_dotspotting.use_polymaps){
        if(args[3]){
            map.extent(args[3]);
    		map.zoom(Math.floor(map.zoom()));
        }else{
            map.center({lon: args[2], lat: args[1]});
        	map.zoom(args[0]);
        }
    }else{
        if(args[3]){
            extent = [
    			new com.modestmaps.Location(args[3][0]['lat'], args[3][0]['lon']),
    			new com.modestmaps.Location(args[3][1]['lat'], args[3][1]['lon'])
    		];
    		map.setExtent(extent);
        }else{
            var loc = new com.modestmaps.Location(args[1], args[2]);
    	    map.setCenterZoom(loc, args[0]);
        }
    }
}

function findMe(str){
    if(!geocoder)return;
    if(!map)return;
    
    geocoder.geocode( { 'address': str}, function(results, status) {
        var extent = null;
    	if (status == google.maps.GeocoderStatus.OK) {
    	    try{
                extent = [
            		{ lat: results[0].geometry.bounds.getSouthWest().lat(), lon: results[0].geometry.bounds.getSouthWest().lng() },
            		{ lat: results[0].geometry.bounds.getNorthEast().lat(), lon: results[0].geometry.bounds.getNorthEast().lng() }
            	];
            }catch(e){
            
            }
        	doErr();
    	    updateMap([8,results[0].geometry.location.lat(),results[0].geometry.location.lng(),extent]);
    	    
    	}else{
    	    doErr("Couldn't not find that place!");
    	}
    
    });
}

function draw_map_polymaps(){
    // check to see if there incoming coordinates
    var qs = new Querystring();
    if(_dotspotting)_dotspotting.hashobj = qs;

    

	map = utils_polymap('map');
	var current_map_zoom,extent = null;
	var incomingState=false;
	
	if(qs && qs.contains('c')){
		var _mapstate = qs.get('c');
		var args = _mapstate.split("/").map(Number);
	   if (args.length < 3 || args.some(isNaN)){
			//
	   } else {
			incomingState = true;
			map.center({lon: args[2], lat: args[1]});
			map.zoom(args[0]);
	   }

	}
	if(!incomingState){
	    map.center({lon: -114.6, lat: 37.6});
	    map.zoom(2);
	}
		

	// adding our own controls
	utils_polymaps_add_compass(map);
	
	// create controls
	utils_add_map_controls(map,"po",extent);
	
	// map toggle size button
	utils_map_toggle_size(map,"po",500,null);


	
	
	// listens for map changes
	// using it to keep dot svg element highlighted
	// throughout zoom ranges
	function handleMapChanges(){

		current_map_zoom = map.zoom();
	}
	

	map.on("move",handleMapChanges);
	map.on("resize",handleMapChanges);
	
	

	if(qs && qs.contains('ff')){
		$("#fllscreen").trigger('click');
	}


	return 1;
}

function draw_map_modestmaps(){
    // check to see if there incoming coordinates
    var qs = new Querystring();
	if(_dotspotting)_dotspotting.hashobj = qs;

	var mm = com.modestmaps;
	map = utils_modestmap('map');
	var extent = null;
	var incomingState = false; 

	
	if(qs && qs.contains('c')){
		var _mapstate = qs.get('c');
		var args = _mapstate.split("/").map(Number);
	   if (args.length < 3 || args.some(isNaN)){
		//
	   } else {
			incomingState = true;
			var loc = new mm.Location(args[1], args[2]);
	    	map.setCenterZoom(loc, args[0]);
	   }
	
	}
    if(!incomingState){
	    var loc = new mm.Location(37.6,-114.6);
		map.setCenterZoom(loc, 2);
	}


	// not really doing anything right now because we have our own controls.
	utils_modestmaps_add_compass(map);	
	
	// create controls
	utils_add_map_controls(map,"mm",extent);

	
	// map tooltip
	utils_add_map_tooltip(map,$("#map").parent(),"mm");
	
	if(qs && qs.contains('ff')){
		$("#fllscreen").trigger('click');
	}

	
	return;
}

function draw_map(){
    if (_dotspotting.use_polymaps){	
    	draw_map_polymaps();
    	return;
    }


    draw_map_modestmaps();
}

//utils_load_map();
</script>
{/literal}

{include file="inc_foot.txt"}