{literal}
<script type="text/javascript">

// store id's for embedding
_dotspotting.embed_props.uid = {/literal}{$owner.id}{literal};
_dotspotting.embed_props.sid = {/literal}{$sheet.id}{literal};

// store json object of dot data
var all_dots = {/literal}{$dots_simple|@json_encode}{literal};

// dot onclick handler
function dot_onclick(dotid,lon,lat){
	// send click event and data to custom markerclick event
	// creates the tooltip
		
	// only continue if dot is currently not selected
	if(!_dotspotting.selected_dot || _dotspotting.selected_dot != dotid){
		
		// unselect a selected dot
		if(_dotspotting.selected_dot)dot_unselect(_dotspotting.selected_dot);
		
		// assign dot id to global config
		_dotspotting.selected_dot = dotid;
		
		// reset dot styles, just in case
		dot_unselect(dotid);
		
		// trigger the tooltip
		$("#map").trigger('markerclick',dotid);
		
		// add highlight class if it isn't there already
		/*
		$("#"+"dot_"+dotid).each(function(){
			dotAddClass($(this)[0] ,'dotHover');
		});
		*/
		dotAddClass(document.getElementById("dot_"+dotid) ,'dotHover');
	}
	
	/* 
	if (dot['id']){
		location.href = dot.url;
	}
	*/
}

// dot onmouseover handler
function dot_onmouseover(dotid){
	
	var dot = dot_getinfo_json(dotid);
	
	if (! dot['id']){
		return;
	}

	var tlen = _dotspotting.dots_list_mouseout_timers.length;

	for (var i = 0; i < tlen; i++){
		clearTimeout(_dotspotting.dots_list_mouseout_timers.pop());
	}
	
	if (_dotspotting.use_polymaps){	
		/* Move dot to bottom of group */
		var element = document.getElementById("dot_"+dotid);
		element.parentNode.appendChild(element);
	
		if(_dotspotting.selected_dot != dotid){
		
			/* Add dot hover class, because appendChild breaks ':hover' in FF */
			dotAddClass(element ,'dotHover');
		
		}
	}
	
	dot_highlight_tr(dotid);
}

// dot onmouseout handler
function dot_onmouseout(dotid){
	if(_dotspotting.selected_dot != dotid){
		dot_unselect(dotid);
	}
	
	var tid = setTimeout(function(){

		dot_restore_tr();

	}, 8000);

	_dotspotting.dots_list_mouseout_timers.push(tid);
}

// resets map bounds
function resetBounds(){
	$("#map").trigger('resetmapbounds');
}

/* ------------------------------------------------------------------------*/
/* Series of helper classes to manage add and deleting classes on SVG dots */
/* ------------------------------------------------------------------------*/

function dotHasClass(element, $class) {
    var pattern = new RegExp("(^| )" + $class + "( |$)");
    return pattern.test(element.className.baseVal) ? true : false;
}


function dotAddClass(element, $class) {
	if(!element)return;
    var i,newClass;
    //is the element array-like?
    if(element.length) {
        for (i = 0; i < element.length; i++) {
			
            if (!dotHasClass(element[i], $class)) {
				newClass = element[i].className.baseVal;
                newClass += element[i].className.baseVal === "" ? 
                $class : " "+$class;
				element.setAttribute('class', newClass);
            }
        }
    }
    else { //not array-like
        if (!dotHasClass(element, $class)) {
			newClass = element.className.baseVal;
            newClass += (element.className.baseVal === "") ? $class : " "+$class;
			element.setAttribute('class', newClass);
        }
    }
    return element;
}

function dotRemoveClass (element, $class) {
	if(!element)return;

    var pattern = new RegExp("(^| )" + $class + "( |$)");
    var i,newClass;

    //is element array-like?
    if(element.length) {
        for (i = 0; i < element.length; i++) {
			newClass = element[i].className.baseVal;
            newClass = newClass.replace(pattern, "$1");
            newClass = newClass.replace(/ $/, "");  
			element.setAttribute('class', newClass);          
        }
    }
    else { //nope
		newClass = element.className.baseVal;
        newClass = newClass.replace(pattern, "$1");
        newClass = newClass.replace(/ $/, ""); 
		element.setAttribute('class', newClass); 
    }
    return element;
}

// it does as the name says it does
function unselectAllDots(){
	$(".dot").each(function(){
		dotRemoveClass($(this)[0],'dotHover');
	});
}

// generic function to reset dot styles
function dot_unselect(dotid){
	//dotRemoveClass(document.getElementById("dot_"+dotid),'dotHover');
	$("#"+"dot_"+dotid).each(function(){
		dotRemoveClass($(this)[0],'dotHover');
	});
}

/* ------------------------------------------------------------------------*/
/* 	 	Create text for tooltip											   */
/* ------------------------------------------------------------------------*/

// returns string used in tooltip header text
function dot_tip_header(dotid){
	
	var dot = dot_getinfo_json(dotid);
	
	if (! dot['id']){
		return "";
	}
	
	var html = "";
	if(_dotspotting.assigned_title && dot[_dotspotting.assigned_title]){
	 	html += '<a href="' + dot.url + '">' + dot[_dotspotting.assigned_title] + '</a>';
	}else{
		html += 'This is dot #<a href="' + dot.url + '">' + dot.id + '</a>';
	}

	return html;

}

// returns string used in tooltip body text
function dot_tip_body(dotid){

	var dot = dot_getinfo_json(dotid);

	if (! dot['id']){
		return "";
	}

	var html = 'It is owned ';
	
	html += dot.owner;

	html += '.';

	if (dot.location){
		var search_url = _dotspotting.abs_root_url + 'search?l=' + encodeURIComponent(dot.location);
		html += ' It\'s located at <a href="' + search_url + '">' + htmlspecialchars(dot.location) + '</a>.';
	}

	else if (dot.latitude && dot.longitude){
		var search_url = _dotspotting.abs_root_url + 'search?gh=' + encodeGeoHash(dot.latitude, dot.longitude);
		html += ' It\'s located at <a href="' + search_url + '">' + dot.latitude + ',' + dot.longitude + '</a>.';
	}

	else {} 

	if (dot.type){
		var search_url = _dotspotting.abs_root_url + 'search?t=' + encodeURIComponent(dot.type);
		html += ' It\'s a <q><a href="' + search_url + '">' + htmlspecialchars(dot.type) + '</a></q>.';
	}
	
	html += ' <span class="date">Created on: ' + dot.created + '</span>';
	
	return html;
}

/* ------------------------------------------------------------------------*/
/* 		Manipulate Table rows											   */
/* ------------------------------------------------------------------------*/

// helper function to highlight dot when user hovers over table row
function dot_tr_hover(el,type){

	var raw_dotid = (el.id).split("_");
	var dotid = raw_dotid[raw_dotid.length-1];
	if(type == "over"){
		dot_onmouseover(dotid);
	}else{
		dot_onmouseout(dotid);
		var tlen = _dotspotting.dots_list_mouseout_timers.length;

		for (var i = 0; i < tlen; i++){
			clearTimeout(_dotspotting.dots_list_mouseout_timers.pop());
		}
		dot_restore_tr();
	}
}

function dot_highlight_tr(dotid){

	dot_restore_tr();

	var selector = "#dotslist_dot_" + dotid + " td";

	_dotspotting['highlighted'] = dotid;

	$(selector).map(function(i, el) {
		var new_classes = el.getAttribute("class") + " highlighted";
		el.setAttribute("class", new_classes);	
	});
}

function dot_restore_tr(){

	var current = _dotspotting['highlighted'];

	if (! current){
		return;
	}

	var selector = "#dotslist_dot_" + current + " td";

	$(selector).map(function(i, el){
		var new_classes = el.getAttribute("class").replace(" highlighted", "");
		el.setAttribute("class", new_classes);
	});

	_dotspotting['highlighted'] = null;
}

/* ------------------------------------------------------------------------*/
/* 		Dot Lookups														   */
/* ------------------------------------------------------------------------*/

/*
 * "dotspotting.dots_list_dots" is a hash table storing the position of the dot object in JSON object.
*/

function dot_getinfo_json(dotid){

	if (_dotspotting.dots_list_dots[dotid]){	
       return all_dots[_dotspotting.dots_list_dots[dotid]];
    }
	
	var dot = {};
	for(i=0;i<all_dots.length;i++){
		if(all_dots[i].id == dotid){
			var _dot = (!all_dots[i]['url']) ? row2dot_json(i) : all_dots[i];
			_dotspotting.dots_list_dots[dotid] = i;
			return _dot;
		}
	}
	return dot;
}

function dot_getinfo(dotid){

    if (_dotspotting.dots_list_dots[dotid]){	
       return _dotspotting.dots_list_dots[dotid];
    }      
    	 
    var row = $("#dotslist_dot_" + dotid);
    var dot = row2dot(row);

    _dotspotting.dots_list_dots[dotid] = dot;
    return dot;
}

function strip_ws_text(str){
	if(!str.length)return '';
	str = str.replace(/^\s+/, '');
	str = str.replace(/\s+$/, '');
	return str
}

function row2dot_json(i,headers){

	if(headers === null || headers === undefined)headers = collect_headers();
	
	if(!all_dots.length)return {};
	
	var _owner = {/literal}'{if $owner}{$owner.username|escape}{elseif $dot.user}{$dot.user.username|escape}{else}???{/if}'{literal};

	// begin processing dots
	if(all_dots[i].id)all_dots[i].id = Number(strip_ws_text(all_dots[i].id));
	if(all_dots[i].longitude)all_dots[i].longitude = parseFloat( strip_ws_text(all_dots[i].longitude) );
	if(all_dots[i].latitude)all_dots[i].latitude = parseFloat( strip_ws_text(all_dots[i].latitude) );
	
	/*var _adetail = dot_search_details(all_dots[i],"magnitude");*/
	
	var ownerid = strip_ws_text(all_dots[i].user_id);

	if (ownerid){
		all_dots[i]['ownerid'] = Number(ownerid);
		all_dots[i]['owner'] = (ownerid == _dotspotting.user.id) ? "you" : _owner;
	}
	
	all_dots[i]['url'] = _dotspotting.abs_root_url + 'u/' + all_dots[i]['ownerid'] + '/dots/' + all_dots[i].id + '/';

	if (!_dotspotting.dots_list_dots[all_dots[i].id])_dotspotting.dots_list_dots[all_dots[i].id] = i;
    
	return all_dots[i];
}

// search through dot details
function dot_search_details(dot, key){
	for(var hh in dot['details']){
		if(dot['details'][hh].label == key){
			return dot['details'][hh].value;
		}
	}
	return "";
}


function row2dot(row, headers){

	var dot = {};

	$(row).find("td").each(function(col, td){

		var classes = $(td).attr("class");
		var key = (headers) ? headers[col] : null;

		if (classes){

			var match = classes.match(/\bdotslist_([a-z_]+)\b/);

			if (match){
				key = match[1];
			}
		}

		if (! key){
			return {};
		}

		var value = $(td).text()
		value = value.replace(/^\s+/, '');
		value = value.replace(/\s+$/, '');

		if (key == 'dotid'){
			value = Number(value);
		}

		else if (key.match(/(?:latitude|longitude)/)){
			value = parseFloat(value);
		}

		else if (key.match(/(?:details|other)/)){
			value = value.split(',');
		}

		else if (key.match(/(?:location|type)/)){
			value = (value == '—') ? null : value;
		}

		else if (key == 'owner'){

			// I am not convinced this is the right way to do this...

			var ownerid = $(td).attr("ds:owner_id");

			if (ownerid){
				dot['ownerid'] = Number(ownerid);
			}
		}

		// parse 'created' date here?

		else {}

		dot[key] = value;
	});

	dot['url'] = _dotspotting.abs_root_url + 'u/' + dot['ownerid'] + '/dots/' + dot.id + '/';
	return dot;
}

function collect_headers(){
	// need to check if dataTable is rendered
	var headerStr = ( $(".dataTables_scrollHead").length ) ? ".dataTables_scrollHead thead tr" : "#user_dots thead tr";
	
	var headers = $(headerStr).map(function(i, row){
		var _headers = [];
		$(row).find("th").each(function(col, th){
			_headers.push($(th).text().toLowerCase());
		});
		return _headers;
	});
	
	return headers;
}

function collect_dots(){

	var headers = collect_headers();

	var swlat = null;
	var swlon = null;
	var nelat = null;
	var nelon = null;
	
	// parse all the dots which also creates a lookup table
	// should only run once per page load
	if(_dotspotting.dots_list_dots[all_dots[0].id] == undefined){
		$(all_dots).each(function(i){
			if (!all_dots[i]['url'])row2dot_json(i,headers);
		});
	}
	
	// now create dots object to feed to map
	var features = $("#user_dots tbody tr").map(function(i,row){
		var classes = $(this).attr("id");
		var match = classes.match(/\bdotslist_dot_([0-9]+)\b/);
		var _rowid = null;
		if (match){
			_rowid = match[1];
		}
		
		var dot = (_rowid != null) ? all_dots[_dotspotting.dots_list_dots[_rowid]] : {};

		var loc = {
			lat: dot.latitude,
			lon: dot.longitude
		};

		swlat = (swlat) ? Math.min(swlat, loc.lat) : loc.lat;
		swlon = (swlon) ? Math.min(swlon, loc.lon) : loc.lon;
		nelat = (nelat) ? Math.max(nelat, loc.lat) : loc.lat;
		nelon = (nelon) ? Math.max(nelon, loc.lon) : loc.lon;

		dot.is_interactive = true;

		return {
			'geometry' : {
				'type' : 'Point',
				'coordinates' : [ loc.lon, loc.lat ]
			},

			'properties' : dot
		};

	});

	var extent = [
		{ lat: swlat, lon: swlon },
		{ lat: nelat, lon: nelon }
	];

	var center = {
		'lat' : swlat + ((nelat - swlat) / 2),
		'lon' : swlon + ((nelon - swlon) / 2)
	};

	return {
		'features': features,
		'extent' : extent,
		'center' : center
	};
}

function draw_map_modestmaps(dots,update_from_search){

	var mm = com.modestmaps;
	var map = utils_modestmap('map');
	var extent = null;
	var incomingState = false;
	
	// check to see if there incoming coordinates 
	var qs = doHashSetup();
	if(qs && qs.contains('c')){
		var _mapstate = qs.get('c');
		var args = _mapstate.split("/").map(Number);
	   if (args.length < 3 || args.some(isNaN)){
		//
	   } else {
			incomingState = true;
			var loc = new mm.Location(args[1], args[2]);
	    	map.setCenterZoom(loc, args[0]);
			//store original extent
			extent = map.getExtent();
	   }
	
	}
	if(!update_from_search){
		if(!incomingState){
			if (dots.features.length == 1){

				var center = dots['center'];
				var zoom = 14;

				var loc = new mm.Location(center['lat'], center['lon']);
		    		map.setCenterZoom(loc, zoom);

			}
			else {
		
				var _extent = utils_adjust_bbox(dots['extent']);
		
				extent = [
					new mm.Location(_extent[0]['lat'], _extent[0]['lon']),
					new mm.Location(_extent[1]['lat'], _extent[1]['lon'])
				];
				map.setExtent(extent);
			}
		}
	}

	// writing dot colors set in config file
	// 0 = attrs , 1 = attrs_hover
	var attr_array = get_mm_dot_styles();


	var more = {
		'attrs' : attr_array[0],

		// just inline the function mostly so that we don't
		// have to redeclare the attrs_* hashes again
		// (20101207/straup)

		'onload' : function(el, props){

			el.mouseout(function (evt) {
				this.attr(attr_array[0]);
				dot_onmouseout(props.id);
			});

			el.mouseover(function (evt) {
				this.attr(attr_array[1]);
				dot_onmouseover(props.id);
			});

			el.click(function(evt){
				dot_onclick(props.id);
			});
		}
	};

	var markers = new mm.Markers(map);
	markers.drawGeoJson(dots['features'], more);

	// not really doing anything right now because we have our own controls.
	utils_modestmaps_add_compass(map);	
	
	// create controls
	utils_add_map_controls(map,"mm",extent);
	
	// map toggle size button
	utils_map_toggle_size(map,"mm",500,markers);
	
	// map tooltip
	utils_add_map_tooltip(map,$("#map").parent(),"mm");

	
	return;
}

function draw_map_polymaps(dots,update_from_search){
	var map = utils_polymap('map');
	var current_map_zoom,extent = null;
	var incomingState=false;
	
	// init selected dot variable
	_dotspotting.selected_dot = null;

	var qs = doHashSetup();
	if(_dotspotting)_dotspotting.hashobj = qs;
	
	if(!update_from_search){
		if(qs && qs.contains('c')){
			var _mapstate = qs.get('c');
			var args = _mapstate.split("/").map(Number);
		   if (args.length < 3 || args.some(isNaN)){
				//
		   } else {
				incomingState = true;
				map.center({lon: args[2], lat: args[1]});
				map.zoom(args[0]);
				//store original extent
				extent = map.extent();
		   }
	
		}
	}
 	if(!incomingState){
		if (dots.features.length == 1){
			map.center(dots.center);
		}
		else {
			extent = utils_adjust_bbox(dots.extent);
			map.extent(extent);
		
			//store original extent
			extent = map.extent();
		}
		map.zoom(Math.floor(map.zoom()));
	}

	var po = org.polymaps;
	var points = po.geoJson();
	points.features(dots['features']);
	points.on("load", utils_polymaps_assign_dot_properties);

	map.add(points);
	
	// adding our own controls
	utils_polymaps_add_compass(map);
	
	// create controls
	utils_add_map_controls(map,"po",extent);
	
	// map toggle size button
	utils_map_toggle_size(map,"po",500,null);

	// map tooltip
	utils_add_map_tooltip(map,$("#map").parent(),"po");
	
	
	// listens for map changes
	// using it to keep dot svg element highlighted
	// throughout zoom ranges
	function handleMapChanges(){
		if( current_map_zoom != map.zoom() ){
			/* 
			I believe there is a better way 
			to remove highlight class from dots on previous zoom layers
			but for now this works
			*/
			unselectAllDots();
			
			// now add highlight class back to a dot that is selected
			if(_dotspotting.selected_dot && _dotspotting.selected_dot !== null){
				var element = document.getElementById("dot_"+ _dotspotting.selected_dot);
				dotAddClass(element,'dotHover');
			}
		}
		current_map_zoom = map.zoom();
	}
	

	map.on("move",handleMapChanges);
	map.on("resize",handleMapChanges);


	return 1;
}
	
function draw_map(update_from_search){

	//console.log("DOT ID: ",_dotspotting.selected_dot);
	
	//if(_dotspotting.selected_dot)$("#map").trigger('killAllTips');

	utils_scrub_map();
	
	var dots = collect_dots();
	
	
	if (_dotspotting.use_polymaps){	
		draw_map_polymaps(dots,update_from_search);
		return;
	}

	draw_map_modestmaps(dots,update_from_search);
}
	
utils_load_map();
  
</script>
{/literal}